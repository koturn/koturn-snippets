snippet DllMain
	#if defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__)
	#  if defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__)
	BOOL APIENTRY
	DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved);
	#  endif  /* defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__) */
	static void
	${1:constructor}(void);

	static void
	${2:destructor}(void);

	BOOL APIENTRY
	DllMain(HMODULE /* hModule */, DWORD ul_reason_for_call, LPVOID /* lpReserved */)
	{
		switch (ul_reason_for_call) {
			case DLL_PROCESS_ATTACH:
				$1();
				break;
			case DLL_THREAD_ATTACH:
				break;
			case DLL_THREAD_DETACH:
				break;
			case DLL_PROCESS_DETACH:
				$2();
				break;
		}
		return TRUE;
	}
	#elif defined(__GNUC__)
	__attribute__((constructor))
	static void
	$1(void);

	__attribute__((destructor))
	static void
	$2(void);
	#endif  /* defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__) */

	static void
	$1(void)
	{

	}

	static void
	$2(void)
	{

	}

	${0}

snippet include
alias inc
	#include <${0}>

snippet include_local
alias incl
	#include "${0}"

snippet include_math
alias inc_math
	#ifdef _MSC_VER
	#  define _USE_MATH_DEFINES
	#endif
	#include <math.h>

snippet define_TRUE
abbr #define TRUE
  #ifndef TRUE
  #  define TRUE
  #endif

snippet define_FALSE
abbr #define FALSE
  #ifndef FALSE
  #  define FALSE
  #endif

snippet define_LENGTH
abbr #define LENGTH
  #define LENGTH(${1:array})  (sizeof($1) / sizeof(($1)[0]))

snippet define_sleep
abbr #define sleep
  #if defined(WIN16) || defined(_WIN16) || defined(__WIN16) || defined(__WIN16__)   \
    || defined(WIN32) || defined(_WIN32) || defined(__WIN32) || defined(__WIN32__)  \
    || defined(WIN64) || defined(_WIN64) || defined(__WIN64) || defined(__WIN64__)
  #  define sleep(${1:sec})  Sleep(($1) * 1000)
  #endif

snippet define_inline
abbr #define inline
  #ifndef __cplusplus
  #  if defined(_MSC_VER)
  #    define inline      __inline
  #    define __inline__  __inline
  #  elif !defined(__GNUC__) && __STDC_VERSION__ < 199901L
  #    define inline
  #    define __inline
  #  endif
  #endif

snippet define_restrict
abbr #define restrict
  #if _MSC_VER >= 1400
  #  define restrict      __restrict
  #  define __restrict__  __restrict
  #elif __cplusplus
  #  define restrict      __restrict
  #elif !defined(__STDC_VERSION__) || __STDC_VERSION__ < 199901L
  #  if defined(__GNUC__)
  #    define restrict    __restrict
  #  else
  #    define restrict
  #    define __restrict
  #    define __restrict__
  #  endif
  #endif

snippet memset
abbr memset(ptr, value, n) <string.h>
  memset(${1:#:ptr}, ${2:#:value}, ${3:#:n})

snippet memcpy
abbr memcpy(to, from, n) <string.h>
  memcpy(${1:#:to}, ${2:#:from}, ${3:#:n})

snippet memmove
abbr memmove(to, from, n) <string.h>
  memmove(${1:#:to}, ${2:#:from}, ${3:#:n})

snippet malloc
abbr (T *) malloc(n * sizeof(T)) <string.h>
  (${1:unsigned char} *) malloc(${2:#:n} * sizeof($1))

snippet calloc
abbr (T *) calloc(n, sizeof(T)) <string.h>
  (${1:unsigned char} *) calloc(${2:#:n}, sizeof($1))

snippet realloc
abbr (T *) realloc(n, sizeof(T)) <string.h>
  (${1:unsigned char} *) realloc(${2:#:n}, sizeof($1))

snippet extern_c
	#ifdef __cplusplus
	extern "C" {
	#endif  /* __cplusplus */

	${0}

	#ifdef __cplusplus
	}
	#endif  /* __cplusplus */

snippet include_guard
alias inc_guard
	#ifndef ${1:#:NAME}
	#define $1

	${0}

	#endif  // $1

snippet if_gcc
	#ifdef __GNUC__
	${0}
	#endif  // __GNUC__

snippet if_msvc
	#ifdef _MSC_VER
	${0}
	#endif  // _MSC_VER

snippet def_dllexport
	#if defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__)
	#  define ${1:#:NAME}_API_IMPORT __declspec(dllimport)
	#  define $1_API_EXPORT __declspec(dllexport)
	#  define $1_API_LOCAL
	#elif defined(__GNUC__) && __GNUC__ >= 4
	#  define $1_API_IMPORT __attribute__((visibility("default")))
	#  define $1_API_EXPORT __attribute__((visibility("default")))
	#  define $1_API_LOCAL  __attribute__((visibility("hidden")))
	#else
	#  define $1_API_IMPORT
	#  define $1_API_EXPORT
	#  define $1_API_LOCAL
	#endif  /* defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__) */

	#ifdef $1_DLL
	#  ifdef $1_EXPORTS
	#    define $1_API $1_API_EXPORT
	#  else
	#    define $1_API $1_API_IMPORT
	#  endif  /* $1_EXPORTS */
	#  define $1_LOCAL $1_API_LOCAL
	#else
	#  define $1_API
	#  define $1_LOCAL
	#endif  /* $1_DLL */

	${0}

	#undef $1_API_IMPORT
	#undef $1_API_EXPORT
	#undef $1_API_LOCAL
	#undef $1_API
	#undef $1_LOCAL

snippet def_printf_arg_check
	#if defined(_MSC_VER) && _MSC_VER >= 1400
	#  include <sal.h>
	#  if _MSC_VER > 1400
	#    define ${1:#:PREFIX}_MSVC_PRINTF_FMT _Printf_format_string_
	#  else
	#    define $1_MSVC_PRINTF_FMT __format_string
	#  endif  //  _MSC_VER > 1400
	#else
	#  define $1_MSVC_PRINTF_FMT
	#endif  // defined(_MSC_VER) && _MSC_VER >= 1400

	#ifdef __GNUC__
	#  define $1_ATTR_PRINTF_FMT(index, vaIndex) __attribute__((format(printf, index, vaIndex)))
	#else
	#  define $1_ATTR_PRINTF_FMT(index, vaIndex)
	#endif  // __GNUC__

	${0}

	#undef $1_MSVC_PRINTF_FMT
	#undef $1_ATTR_PRINTF_FMT

snippet def_scanf_arg_check
	#if defined(_MSC_VER) && _MSC_VER >= 1400
	#  include <sal.h>
	#  if _MSC_VER > 1400
	#    define ${1:#:PREFIX}_MSVC_SCANF_FMT _Scanf_format_string_
	#  else
	#    define $1_MSVC_SCANF_FMT __format_string
	#  endif  //  _MSC_VER > 1400
	#else
	#  define $1_MSVC_SCANF_FMT
	#endif  // defined(_MSC_VER) && _MSC_VER >= 1400

	#ifdef __GNUC__
	#  define $1_ATTR_SCANF_FMT(index, vaIndex) __attribute__((format(scanf, index, vaIndex)))
	#else
	#  define $1_ATTR_SCANF_FMT(index, vaIndex)
	#endif  // __GNUC__

	${0}

	#undef $1_MSVC_SCANF_FMT
	#undef $1_ATTR_SCANF_FMT

snippet def_likely_if
	#if __cplusplus > 201703L \
		|| defined(_MSVC_LANG) && _MSVC_LANG > 201703L \
		|| defined(__has_cpp_attribute) && __has_cpp_attribute(likely)
	#  define ${1:#:PREFIX}_LIKELY_IF(cond)  [[likely]] if (cond)
	#elif defined(__GNUC__) && defined(__GNUC_MINOR__) && (__GNUC__ > 2 || __GNUC__ == 2 && __GNUC_MINOR__ >= 96)
	#  define $1_LIKELY_IF(cond)  if (__builtin_expect(!!(cond), 1))
	#else
	#  define $1_LIKELY_IF(cond)  if (cond)
	#endif

	${0}

	#undef $1_LIKELY_IF

snippet def_unlikely_if
	#if __cplusplus > 201703L \
		|| defined(_MSVC_LANG) && _MSVC_LANG > 201703L \
		|| defined(__has_cpp_attribute) && __has_cpp_attribute(unlikely)
	#  define ${1:#:PREFIX}_UNLIKELY_IF(cond)  [[unlikely]] if (cond)
	#elif defined(__GNUC__) && defined(__GNUC_MINOR__) && (__GNUC__ > 2 || __GNUC__ == 2 && __GNUC_MINOR__ >= 96)
	#  define $1_UNLIKELY_IF(cond)  if (__builtin_expect(!!(cond), 0))
	#else
	#  define $1_UNLIKELY_IF(cond)  if (cond)
	#endif

	${0}

	#undef $1_UNLIKELY_IF

snippet def_assume
	#if defined(NDEBUG)
	#  ifdef _MSC_VER
	#    define ${1:#:PREFIX}_ASSUME(x)  __assume(x)
	#  else
	#    define $1_ASSUME(x)
	#  endif  // _MSC_VER
	#elif defined(assert)
	#  define $1_ASSUME(x)  assert(x)
	#else
	#  define $1_ASSUME(x)
	#endif  // defined(NDEBUG)

	${0}

	#undef $1_ASSUME

snippet supress_warnings_gcc
	#if (defined(__GNUC__) && (__GNUC__ > 4 || __GNUC__ == 4 && __GNUC_MINOR__ >= 6))
	#  define ${1:#:PREFIX}_AVAILABLE_GCC_DIAGNOSTIC_PRAGMA 1
	#endif

	#ifdef $1_AVAILABLE_GCC_DIAGNOSTIC_PRAGMA
	#  pragma GCC diagnostic push
	#  pragma GCC diagnostic ignored "-Weffc++"
	#  ${0}
	#endif  // $1_AVAILABLE_GCC_DIAGNOSTIC_PRAGMA

	#ifdef $1_AVAILABLE_GCC_DIAGNOSTIC_PRAGMA
	#  pragma GCC diagnostic pop
	#endif  // $1_AVAILABLE_GCC_DIAGNOSTIC_PRAGMA


	#ifdef $1_AVAILABLE_GCC_DIAGNOSTIC_PRAGMA
	#  undef $1_AVAILABLE_GCC_DIAGNOSTIC_PRAGMA
	#endif  // $1_AVAILABLE_GCC_DIAGNOSTIC_PRAGMA

snippet supress_warnings_msvc
	#ifdef _MSC_VER
	#  pragma warning(push)
	#  pragma warning(disable : ${1:#:warning numbers})
	#endif  // _MSC_VER

	${0}

	#ifdef _MSC_VER
	#  pragma warning(pop)
	#endif  // _MSC_VER

snippet pragma_comment_lib
	#pragma comment(lib, ${0})

snippet toggle_comment
	//*
	${0}
	/*/

	//*/

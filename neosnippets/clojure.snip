snippet defn
alias define defun
options head
	(defn ${1:#:name}
		"${2:#:docstring}"
		[${3:#:args}]
		${0})

snippet lambda
	(fn [${1:#:args...}]
		${0:TARGET})

snippet let
	(let [${1:#:bind-list foo 1 bar 2}]
		${0:TARGET})

snippet if
	(if (${1:#:condition})
		${2:#:(not nil)}
		${3:#:nil})

snippet if-let
	(if [${1:#:bind-var} (${2:#:condition})]
		${3:#:(not nil)}
		${4:#:nil})

snippet when
	(when (${1:#:condition})
		${0:TARGET})

snippet when-let
	(when [${1:#:bind-var} (${2:#:condition})]
		${0:TARGET})

snippet case
	(case ${1:#:var}
		${2:#:case-1} ${3:#:case-1-value}
		${4:#:case-2} ${5:#:case-2-value}
		${6:#:default-value})

snippet cond
	(cond
		(${1:#:condition-1}) ${2:#:condition-1-value}
		(${3:#:condition-2}) ${4:#:condition-2-value}
		:else ${5:#:default-value})

snippet loop
	(loop [${1:#:bind-list foo 1 bar 2}]
		${0:TARGET}
		(recur $1))

snippet loop-n
	(loop [${1:i} ${2:#:from}]
		(when (< $1 ${3:#:to})
			${0:TARGET}
			(recur (inc $1))))

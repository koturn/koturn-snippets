snippet shebang
abbr #!/bin/sh
	#!/bin/${1:sh}

	${0}

snippet script_dir
abbr ${0%/*}
	\${0%/*}

snippet script_dir2
abbr $(dirname $0)
	\$(dirname \$0)

snippet echoerr
alias stderr
abbr echo >&2
	echo >&2 ${0}

snippet echoline
abbr echo ""
	echo "\
	${0}
	"

snippet redir_errout
abbr 2>&1
	2>&1

snippet fn
abbr f() { ... }
	${1:#:name}() {
		${0}
	}

snippet trap-once
abbr trap '...; trap HUP INT TERM' HUP INT TERM
	trap '${1:#:action}; trap $2' ${2:HUP INT TERM}
	${0}
	trap $2

snippet var_get_suffix
abbr ${var##*.}
	\${${1:#:var}##*.}

snippet var_basename
alias basename
abbr ${var##*/}
	\${${1:#:var}##*/}

snippet var_remove_suffix
abbr ${var%.*}
	\${${1:#:var}%.*}

snippet var_dirname
alias dirname
abbr ${var%/*}
	\${${1:#:var}%/*}

snippet var_default_if_null
abbr ${var:-default}
	\${${1:#:var}:-${2:#:default}}

snippet var_assing_if_null
abbr ${var:=default}
	\${${1:#:var}:=${2:#:value}}

snippet var_default_if_not_defined
abbr ${var-default}
	\${${1:#:var}-${2:#:default}}

snippet var_assing_if_not_defined
abbr ${var=default}
	\${${1:#:var}=${2:#:value}}

snippet var_error_if_not_null
abbr ${var:?message}
	\${${1:#:var}:?${2:#:message}}

snippet var_default_if_not_null
abbr ${var+message}
	\${${1:#:var}+${2:#:default}}

snippet var_assign_if_not_null
abbr ${var:+message}
	\${${1:#:var}:+${2:#:default}}

snippet var_remove_shortest_forward_match
abbr ${var#word}
	\${${1:#:var}#${2:#:word}}

snippet var_remove_longest_forward_match
abbr ${var##word}
	\${${1:#:var}##${2:#:word}}

snippet var_remove_shortest_backward_match
abbr ${var%word}
	\${${1:#:var}%${2:#:word}}

snippet var_remove_longest_backward_match
abbr ${var%%word}
	\${${1:#:var}%%${2:#:word}}

snippet if_test
abbr if test ...; then ...; fi
	if test ${1}; then
		${0}
	fi

snippet if_defined
abbr if ${var+:} false; then
	if \${${1:#:var}+:} false; then
		${0}
	fi

snippet if_not_defined
abbr if ! ${var+:} false; then
	if ! \${${1:#:var}+:} false; then
		${0}
	fi

snippet if_executable
abbr if [ "$(while cmd 2> /dev/null)" = '' -o $? -eq 0 ]; then
	if [ "\$(which ${1:#:command} 2> /dev/null)" = '' -o \$? -eq 0 ]; then
		${0}
	fi

snippet if_not_executable
abbr if [ "$(while cmd 2> /dev/null)" = '' -o $? -ne 0 ]; then
	if [ "\$(which ${1:#:command} 2> /dev/null)" = '' -o \$? -ne 0 ]; then
		${0}
	fi

snippet while_index
abbr i=0 while [ $i -lt N ]; do ... done
	${1:i}=${2:0}
	while [ "\${$1}" -lt ${3:#:nLoop} ]; do
		${0}
		$1=\$(expr \${$1}" + 1)
	done

snippet posix_array
	${1:#:var}="\
	${0}
	"
	${2:$1_list}=\`echo \$$1 | cut -f 1- -d ' '\`

snippet bash_var_regex_one
abbr ${var/pattern/after}
	\${${1:#:var}/${2:#:pattern}/${3:#:after}}

snippet bash_var_regex
alias bash_var_regex_all
abbr ${var//pattern/after}
	\${${1:#:var}//${2:#:pattern}/${3:#:after}}

snippet bash_if
abbr if [[ ${1} ]]; then ...; fi (bash)
	if [[ ${1} ]]; then
		${0}
	fi

snippet bash_for
abbr for ((i = 0; i < n; i++)) { ... } (bash)
	declare -i ${1:i}
	for (($1 = ${2:0}; $1 < ${3}; $1++)) {
		${0}
	}

snippet bash_foreach_brace
abbr for i in {0..n}; do ...; done (bash)
	for i in {${1:0}..${2}}; do
		${0}
	done

snippet bash_foreach_brace2
abbr for i in {0..n..step}; do ...; done (bash)
	for i in {${1:0}..${2:#:to}..${3:#:step}}; do
		${0}
	done

snippet getopt
	unset GETOPT_COMPATIBLE
	local ${1:opt}=\`getopt -o '${2:#:short-options}' -l '${3:#:long-options}' -- "\$@"\`
	eval set -- "\$$1"
	while [ \$# -gt 0 ]; do
		case \$1 in
			${4:#:match-option})
				${0}
				;;
			--)
				shift
				break
				;;
		esac
		shift
	done

snippet identify_os
abbr case ${OSTYPE} in
	case \${OSTYPE} in
		cygwin | msys)
			${0}
			;;
		darwin*)
			;;
		linux*)
			;;
	esac

snippet min
	std::min(${1:#:x}, ${2:#:y})

snippet max
	std::max(${1:#:x}, ${2:#:y})

snippet update_min
	${1:#:minValue} = std::min($1, ${2:#:newValue})

snippet update_max
	${1:#:maxValue} = std::max($1, ${2:#:newValue})

snippet update_min_if
	if (${1:#:minValue} > ${2:#:newValue}) {
		$1 = $2;
		${0}
	}

snippet update_max_if
	if (${1:#:maxValue} < ${2:#:newValue}) {
		$1 = $2;
		${0}
	}

snippet for_each
abbr std::for_each <algorithm>
	std::for_each(
		std::begin(${1}),
		std::end($1),
		[](const auto& ${2:e}) {
			${0}
		});

snippet for_each11
abbr std::for_each <algorithm>
	std::for_each(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:e}) {
			${0}
		});

snippet all_of
abbr std::all_of <algorithm>
	std::all_of(
		std::cbegin(${1}),
		std::cend($1),
		[](const auto& ${2:e}) {
			return ${0};
		});

snippet all_of11
abbr std::all_of <algorithm>
	std::all_of(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:e}) {
			return ${0};
		});

snippet none_of
abbr std::none_of <algorithm>
	std::none_of(
		std::cbegin(${1}),
		std::cend($1),
		[](const auto& ${2:e}) {
			return ${0};
		});

snippet none_of11
abbr std::none_of <algorithm>
	std::none_of(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:e}) {
			return ${0};
		});

snippet any_of
abbr std::any_of <algorithm>
	std::any_of(
		std::cbegin(${1}),
		std::cend($1),
		[](const auto& ${2:e}) {
			return ${0};
		});

snippet any_of11
abbr std::any_of <algorithm>
	std::any_of(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:e}) {
			return ${0};
		});

snippet sort
abbr std::sort <algorithm>
	std::sort(std::begin(${1}), std::end($1))

snippet sort_f
abbr std::sort <algorithm>
	std::sort(
		std::begin(${1}),
		std::end($1),
		[](const auto& ${2:x}, const auto& ${3:y}) {
			return ${0:$2 < $3};
		});

snippet sort_f11
abbr std::sort <algorithm>
	std::sort(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:x}, const decltype($1)::value_type& ${3:y}) {
			return ${0:$2 < $3};
		});

snippet stable_sort
abbr std::stable_sort <algorithm>
	std::stable_sort(std::begin(${1}), std::end($1))

snippet stable_sort_f
abbr std::stable_sort <algorithm>
	std::stable_sort(
		std::begin(${1}),
		std::end($1),
		[](const auto& ${2:x}, const auto& ${3:x}) {
			return ${0:$2 < $3};
		});

snippet stable_sort_f11
abbr std::stable_sort <algorithm>
	std::stable_sort(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:x}, const decltype($1)::value_type& ${3:y}) {
			return ${0:$2 < $3};
		});

snippet shuffle
abbr std::shuffle <algorithm> <random>
	std::shuffle(std::begin(${1}), std::end($1), ${2:std\:\:mt19937{}})

snippet partial_sum
abbr std::partial_sum <numeric>
	std::partial_sum(std::cbegin(${1}), std::cend($1), std::begin(${2}));

snippet partial_sum11
abbr std::partial_sum <numeric>
	std::partial_sum(std::begin(${1}), std::end($1), std::begin(${2}));

snippet min_element
abbr std::min_element <algorithm>
	std::min_element(std::cbegin(${1}), std::cend($1))

snippet min_element11
abbr std::min_element <algorithm>
	std::min_element(std::begin(${1}), std::end($1))

snippet min_element_f
abbr std::min_element <algorithm>
	std::min_element(
		std::begin(${1}),
		std::end($1),
		[](const auto& ${2:x}, const auto& ${3:y}) {
			return ${0:$2 < $3};
		});

snippet min_element_f11
abbr std::min_element <algorithm>
	std::min_element(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:x}, const decltype($1)::value_type& ${3:y}) {
			return ${0:$2 < $3};
		});

snippet max_element
abbr std::max_element <algorithm>
	std::max_element(std::cbegin(${1}), std::cend($1))

snippet max_element11
abbr std::max_element <algorithm>
	std::max_element(std::begin(${1}), std::end($1))

snippet max_element_f
abbr std::max_element <algorithm>
	std::max_element(
		std::cbegin(${1}),
		std::cend($1),
		[](const auto& ${2:x}, const auto& ${3:y}) {
			return ${0:$2 < $3};
		});

snippet max_element_f11
abbr std::max_element <algorithm>
	std::max_element(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:x}, const decltype($1)::value_type& ${3:y}) {
			return ${0:$2 < $3};
		});

snippet minmax_element
abbr std::minmax_element <algorithm>
	std::minmax_element(std::cbegin(${1}), std::cend($1))

snippet minmax_element11
abbr std::minmax_element <algorithm>
	std::minmax_element(std::begin(${1}), std::end($1))

snippet minmax_element_f
abbr std::minmax_element <algorithm>
	std::minmax_element(
		std::cbegin(${1}),
		std::cend($1),
		[](const auto& ${2:x}, const auto& ${3:y}) {
			return ${0:$2 < $3};
		});

snippet minmax_element_f11
abbr std::minmax_element <algorithm>
	std::minmax_element(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:x}, const decltype($1)::value_type& ${3:y}) {
			return ${0:$2 < $3};
		});

snippet iota
abbr std::iota <numeric>
	std::iota(std::begin(${1}), std::end($1), ${2:0})

snippet generate
alias generate_f
abbr std::generate <algorithm>
	std::generate(
		std::begin(${1}),
		std::end($1),
		[]{
			return ${0};
		});

snippet generate_n
alias generate_n_f
	std::generate(
		${1:#:begin},
		${2:#:size},
		[]{
			return ${0};
		});

snippet fill_random
	std::generate(std::begin(${1}), std::end($1), std::${2:mt19937}{std::random_device{}()});

snippet fill
abbr std::fill <algorithm>
	std::fill(std::begin(${1}), std::end($1), ${2:#:0})

snippet fill_n
abbr std::fill_n <algorithm>
	std::fill_n(${1:#:begin}, ${2:#:size}, ${3:#:0})

snippet count
abbr std::count <algorithm>
	std::count(std::cbegin(${1}), std::cend($1), ${2:#:value})

snippet count11
abbr std::count <algorithm>
	std::count(std::begin(${1}), std::end($1), ${2:#:value})

snippet count_if
alias count_f
abbr std::count_if <algorithm>
	std::count_if(
		std::cbegin(${1}),
		std::cend($1),
		[](const auto& ${2:e}) {
			return ${0};
		});

snippet count_if11
alias count_p11
abbr std::count_if <algorithm>
	std::count_if(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:e}) {
			return ${0};
		});

snippet equal
abbr std::equal <algorithm>
	std::equal(std::cbegin(${1}), std::cend($1), std::cbegin(${2}));

snippet equal11
abbr std::equal <algorithm>
	std::equal(std::begin(${1}), std::end($1), std::begin(${2}));

snippet equal_f
abbr std::equal <algorithm>
	std::equal(
		std::cbegin(${1}),
		std::cend($1),
		std::cbegin(${2}),
		[](const auto& ${3:x}, const auto& ${4:y}) {
			return ${0:$3 == $4};
		});

snippet equal_f11
abbr std::equal <algorithm>
	std::equal(
		std::begin(${1}),
		std::end($1),
		std::begin(${2}),
		[](const decltype($1)::value_type& ${3:x}, const decltype($2)::value_type& ${4:y}) {
			return ${0:$3 == $4};
		});

snippet find
abbr std::find <algorithm>
	std::find(std::cbegin(${1}), std::cend($1), ${2:#:value})

snippet find11
abbr std::find <algorithm>
	std::find(std::begin(${1}), std::end($1), ${2:#:value})

snippet find_if
alias find_f
abbr std::find_if <algorithm>
	std::find_if(
		std::cbegin(${1}),
		std::cend($1),
		[](const auto& ${2:e}) {
			return ${0};
		});

snippet find_if11
alias find_f11
abbr std::find_if <algorithm>
	std::find_if(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:e}) {
			return ${0};
		});

snippet lower_bound
abbr std::lower_bound <algorithm>
	std::lower_bound(std::cbegin(${1}), std::cend($1), ${2:#:value});

snippet lower_bound11
abbr std::lower_bound <algorithm>
	std::lower_bound(std::begin(${1}), std::end($1), ${2:#:value});

snippet lower_bound_f
abbr std::lower_bound <algorithm>
	std::lower_bound(
		std::cbegin(${1}),
		std::cend($1),
		${2:#:value},
		[](const auto& ${3:e}) {
			return ${0};
		});

snippet lower_bound_f11
abbr std::lower_bound <algorithm>
	std::lower_bound(
		std::begin(${1}),
		std::end($1),
		${2:#:value},
		[](const decltype($1)::value_type& ${3:e}) {
			return ${0};
		});

snippet upper_bound
abbr std::upper_bound <algorithm>
	std::upper_bound(std::cbegin(${1}), std::cend($1), ${2:#:value});

snippet upper_bound11
abbr std::upper_bound <algorithm>
	std::upper_bound(std::begin(${1}), std::end($1), ${2:#:value});

snippet upper_bound_f
abbr std::upper_bound <algorithm>
	std::upper_bound(
		std::cbegin(${1}),
		std::cend($1),
		${2:#:value},
		[](const auto& ${3:e}) {
			return ${0};
		});

snippet upper_bound_f11
abbr std::upper_bound <algorithm>
	std::upper_bound(
		std::begin(${1}),
		std::end($1),
		${2:#:value},
		[](const decltype($1)::value_type& ${3:e}) {
			return ${0};
		});

snippet remove
abbr std::remove <algorithm>
	std::remove(std::begin(${1}), std::end($1), ${2:#:value})

snippet remove_if
alias remove_f
abbr std::remove_if <algorithm>
	std::remove_if(
		std::begin(${1}),
		std::end($1),
		[](const auto& ${2:e}) {
			return ${0};
		});

snippet remove_if11
alias remove_f11
abbr std::remove_if <algorithm>
	std::remove_if(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:e}) {
			return ${0};
		});

snippet remove_erase
	${1}.erase(std::remove(std::begin($1), std::end($1), ${2:#:value}), std::end($1));

snippet remove_erase_if
alias remove_erase_p filter select
	${1}.erase(
		std::remove_if(
			std::begin($1),
			std::end($1),
			[](const auto& ${2:e}) {
				return ${0};
			}),
		std::end($1));

snippet remove_erase_if11
alias remove_erase_p11 filter11 select11
	${1}.erase(
		std::remove_if(
			std::begin($1),
			std::end($1),
			[](const decltype($1)::value_type& ${2:e}) {
				return ${0};
			}),
		std::end($1));

snippet search
	std::search(
		std::cbegin(${1}),
		std::cend($1),
		std::cbegin(${2}),
		std::cend($2));

snippet search11
	std::search(
		std::begin(${1}),
		std::end($1),
		std::begin(${2}),
		std::end($2));

snippet search_f
	std::search(
		std::cbegin(${1}),
		std::cend($1),
		std::cbegin(${2}),
		std::cend($2),
		[](const auto& ${3:x}, const auto& ${4:y}) {
			return ${0:$3 == $4};
		});

snippet search_f11
	std::search(
		std::begin(${1}),
		std::end($1),
		std::begin(${2}),
		std::end($2),
		[](const auto& ${3:x}, const auto& ${4:y}) {
			return ${0:$3 == $4};
		});

snippet set_union
	std::set_union(
		std::cbegin(${1}),
		std::cend($1),
		std::cbegin(${2}),
		std::cend($2),
		std::begin(${3}));

snippet set_union11
	std::set_union(
		std::begin(${1}),
		std::end($1),
		std::begin(${2}),
		std::end($2),
		std::begin(${3}));

snippet set_union_f
	std::set_union(
		std::cbegin(${1}),
		std::cend($1),
		std::cbegin(${2}),
		std::cend($2),
		std::begin(${3}),
		[](const auto& ${4:x}, const auto& ${5:y}) {
			return ${0:$4 == $5};
		});

snippet set_union_f11
	std::set_union(
		std::begin(${1}),
		std::end($1),
		std::begin(${2}),
		std::end($2),
		std::begin(${3}),
		[](const decltype($1)::value_type& ${4:x}, const decltype($1)::value_type& ${5:y}) {
			return ${0:$4 == $5};
		});

snippet unique
abbr std::unique <algorithm>
	std::unique(std::begin(${1}), std::end($1))

snippet unique_f
abbr std::unique <algorithm>
	std::unique(
		std::begin(${1}),
		std::end($1),
		[](const auto& ${2:x}, const auto& ${3:y}) {
			return ${0:$2 == $3};
		});

snippet unique_f11
abbr std::unique <algorithm>
	std::unique(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${2:x}, const decltype($1)::value_type& ${3:y}) {
			return ${0:$2 == $3};
		});

snippet unique_erase
	${1}.erase(std::unique(std::begin($1), std::end($1)), std::end($1));

snippet unique_erase_f
	${1}.erase(
		std::unique(
			std::begin($1),
			std::end($1),
			[](const auto& ${2:x}, const auto& ${3:y}) {
				return ${0:$2 == $3};
			}),
		std::end($1));

snippet unique_erase_f11
	${1}.erase(
		std::unique(
			std::begin($1),
			std::end($1),
			[](const decltype($1)::value_type& ${2:x}, const decltype($1)::value_type& ${3:y}) {
				return ${0:$2 == $3};
			}),
		std::end($1));

snippet copy
abbr std::copy <algorithm>
	std::copy(std::cbegin(${1}), std::cend($1), std::begin(${2}))

snippet copy11
abbr std::copy <algorithm>
	std::copy(std::begin(${1}), std::end($1), std::begin(${2}))

snippet copy_back_inserter
abbr std::copy_back_inserter <algorithm>
	std::copy(std::cbegin(${1}), std::cend($1), std::back_inserter(${2}))

snippet copy_back_inserter11
abbr std::copy_back_inserter <algorithm>
	std::copy(std::begin(${1}), std::end($1), std::back_inserter(${2}))

snippet copy_backward
abbr std::copy_backword <algorithm>
	std::copy_backward(std::cbegin(${1}), std::cend($1), std::end(${2}))

snippet copy_backward11
abbr std::copy_backword <algorithm>
	std::copy_backward(std::begin(${1}), std::end($1), std::end(${2}))

snippet copy_n
abbr std::copy_n <algorithm>
	std::copy_n(std::cbegin(${1}), ${2:#:size}, std::begin(${3}))

snippet copy_n11
abbr std::copy_n <algorithm>
	std::copy_n(std::begin(${1}), ${2:#:size}, std::begin(${3}))

snippet copy_n_back_inserter
abbr std::copy_n_back_inserter <algorithm>
	std::copy_n(std::cbegin(${1}), ${2:#:size}, std::back_inserter(${3}))

snippet copy_n_back_inserter11
abbr std::copy_n_back_inserter <algorithm>
	std::copy_n(std::begin(${1}), ${2:#:size}, std::back_inserter(${3}))

snippet copy_if
alias copy_f
abbr std::copy_if <algorithm>
	std::copy_if(
		std::cbegin(${1}),
		std::cend($1),
		std::begin(${2}),
		[](const auto& ${3:e}) {
			return ${0};
		});

snippet copy_if11
alias copy_f11
abbr std::copy_if <algorithm>
	std::copy_if(
		std::begin(${1}),
		std::end($1),
		std::begin(${2}),
		[](const decltype($1)::value_type& ${3:e}) {
			return ${0};
		});

snippet copy_if_back_inserter
alias copy_p_back_inserter
abbr std::copy_if_back_inserter <algorithm>
	std::copy_if(
		std::cbegin(${1}),
		std::cend($1),
		std::back_inserter(${2}),
		[](const auto& ${3:e}) {
			return ${0};
		});

snippet copy_if_back_inserter11
alias copy_p_back_inserter11
abbr std::copy_if_back_inserter <algorithm>
	std::copy_if(
		std::begin(${1}),
		std::end($1),
		std::back_inserter(${2}),
		[](const decltype($1)::value_type& ${3:e}) {
			return ${0};
		});

snippet replace
abbr std::replace <algorithm>
	std::replace(std::begin(${1}), std::end($1), ${2:#:before}, ${3:#:after})

snippet replace_if
alias replace_f
abbr std::replace_if <algorithm>
	std::replace_if(
		std::begin(${1}),
		std::end($1),
		[](const auto& ${3:e}) {
			return ${0};
		}, ${2:#:after});

snippet replace_if11
alias replace_f11
abbr std::replace_if <algorithm>
	std::replace_if(
		std::begin(${1}),
		std::end($1),
		[](const decltype($1)::value_type& ${3:e}) {
			return ${0};
		}, ${2:#:after});

snippet reverse
	std::reverse(std::begin(${1}), std::end($1))

snippet rotate
	std::rotate(std::begin(${1}), std::next(std::begin($1), ${2:1}), std::end($1))

snippet sum
alias foldl
	std::accumulate(std::cbegin(${1}), std::cend($1), ${2:decltype($1)::value_type{}})

snippet sum11
alias foldl11
	std::accumulate(std::begin(${1}), std::end($1), ${2:decltype($1)::value_type{}})

snippet foldr
	std::accumulate(
		std::crbegin(${1}),
		std::crend($1),
		${2:decltype($1)::value_type{}},
		[](const auto& ${3:acc}, const auto& ${4:e}) {
			return $4 + acc;
		});

snippet foldr11
	std::accumulate(
		std::rbegin(${1}),
		std::rend($1),
		${2:decltype($1)::value_type{}},
		[](const decltype($1)::value_type& ${3:acc}, const decltype($1)::value_type& ${4:e}) {
			return $4 + acc;
		});

snippet accumulate
alias accumulate_f reduce
abbr std::acumulate <numeric>
	std::accumulate(
		std::cbegin(${1}),
		std::cend($1),
		${2:decltype($1)::value_type{}},
		[](const auto& ${3:acc}, const auto& ${4:e}) {
			return ${5:$3 + $4};
		});

snippet accumulate11
alias accumulate_f11 reduce11
abbr std::acumulate <numeric>
	std::accumulate(
		std::begin(${1}),
		std::end($1),
		${2:decltype($1)::value_type{}},
		[](const decltype($1)::value_type& ${3:acc}, const decltype($1)::value_type& ${4:e}) {
			return ${5:$3 + $4};
		});

snippet inner_product
abbr std::inner_product <numeric>
	std::inner_product(std::cbegin(${1}), std::cend($1), std::cbegin(${2}), ${3:decltype($1)::value_type{}})

snippet inner_product11
abbr std::inner_product <numeric>
	std::inner_product(std::begin(${1}), std::end($1), std::begin(${2}), ${3:decltype($1)::value_type{}})

snippet inner_product_f
abbr std::inner_product <numeric>
	std::inner_product(
		std::cbegin(${1}),
		std::cend($1),
		std::cbegin(${2}),
		${3:decltype($1)::value_type{}}
		[](const auto& ${4:acc}, const auto& ${5:e}){
			return ${6:$4 + $5};
		},
		[](const auto& ${7:x}, const auto& ${8:y}){
			return ${9:$7 * $8};
		})${0}

snippet inner_product_f11
abbr std::inner_product <numeric>
	std::inner_product(
		std::cbegin(${1}),
		std::cend($1),
		std::cbegin(${2}),
		${3:decltype($1)::value_type{}}
		[](const decltype($1)::value_type& ${4:acc}, const decltype($1)::value_type& ${5:e}){
			return ${6:$4 + $5};
		},
		[](const decltype($1)::value_type& ${7:x}, const decltype($2)::value_type& ${8:y}){
			return ${9:$7 * $8};
		})${0}

snippet transform
alias transform_f map_set select
abbr std::transform <algorithm>
	std::transform(
		std::cbegin(${1}),
		std::cend($1),
		std::begin(${2}),
		[](const auto& ${3:e}) {
			return ${0};
		});

snippet transform11
alias transform_f11 map_set11 select11
abbr std::transform <algorithm>
	std::transform(
		std::begin(${1}),
		std::end($1),
		std::begin(${2}),
		[](const decltype($1)::value_type& ${3:e}) {
			return ${0};
		});

snippet tolower_string
	std::transform(std::cbegin(${1}), std::cend($1), std::begin($1), static_cast<int (*)(int)>(std::tolower));

snippet tolower_string11
	std::transform(std::begin(${1}), std::end($1), std::begin($1), static_cast<int (*)(int)>(std::tolower));

snippet toupper_string
	std::transform(std::cbegin(${1}), std::cend($1), std::begin($1), static_cast<int (*)(int)>(std::toupper));

snippet toupper_string11
	std::transform(std::begin(${1}), std::end($1), std::begin($1), static_cast<int (*)(int)>(std::toupper));

snippet next_permutation
	do {
		${0}
	} while (std::next_permutation(std::begin(${1}), std::end($1)));

<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>main function</Title>
      <Shortcut>main</Shortcut>
      <Description>Define main function</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[int
        main()
        {
          $end$
          return EXIT_SUCCESS;
        }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>main function with command-line arguments</Title>
      <Shortcut>main_args</Shortcut>
      <Description>Define main function with command-line arguments</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[int
        main(int argc, const char* argv[])
        {
          $end$
          return EXIT_SUCCESS;
        }
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>DLL main function</Title>
      <Shortcut>dllmain</Shortcut>
      <Description>Define DllMain</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>constructor</ID>
          <ToolTip>On attached function</ToolTip>
          <Default>constructor</Default>
        </Literal>
        <Literal>
          <ID>destructor</ID>
          <ToolTip>On detached function</ToolTip>
          <Default>destructor</Default>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[#if defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__)
        #  if defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__)
        BOOL APIENTRY
        DllMain(HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved);
        #  endif  /* defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__) */
        static void
        $constructor$();

        static void
        $destructor$();

        BOOL APIENTRY
        DllMain(HMODULE /* hModule */, DWORD ul_reason_for_call, LPVOID /* lpReserved */)
        {
          switch (ul_reason_for_call) {
            case DLL_PROCESS_ATTACH:
              $constructor$();
              break;
            case DLL_THREAD_ATTACH:
              break;
            case DLL_THREAD_DETACH:
              break;
            case DLL_PROCESS_DETACH:
              $destructor$();
              break;
          }
          return TRUE;
        }
        #elif defined(__GNUC__)
        __attribute__((constructor))
        static void
        $constructor$();

        __attribute__((destructor))
        static void
        $destructor$();
        #endif  /* defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__) */

        static void
        $constructor$()
        {

        }

        static void
        $destructor$()
        {

        }

        $end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Define dllexport macro</Title>
      <Shortcut>defdllexport</Shortcut>
      <Description>Define dllexport macro</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>PREFIX</ID>
          <ToolTip>Prefix of export macro</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[#if defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__)
        #  define $PREFIX$_API_IMPORT __declspec(dllimport)
        #  define $PREFIX$_API_EXPORT __declspec(dllexport)
        #  define $PREFIX$_API_LOCAL
        #elif defined(__GNUC__) && __GNUC__ >= 4
        #  define $PREFIX$_API_IMPORT __attribute__((visibility("default")))
        #  define $PREFIX$_API_EXPORT __attribute__((visibility("default")))
        #  define $PREFIX$_API_LOCAL  __attribute__((visibility("hidden")))
        #else
        #  define $PREFIX$_API_IMPORT
        #  define $PREFIX$_API_EXPORT
        #  define $PREFIX$_API_LOCAL
        #endif  /* defined(_MSC_VER) || defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__) || defined(__MINGW64__) */

        #ifdef $PREFIX$_DLL
        #  ifdef $PREFIX$_EXPORTS
        #    define $PREFIX$_API $PREFIX$_API_EXPORT
        #  else
        #    define $PREFIX$_API $PREFIX$_API_IMPORT
        #  endif  /* $PREFIX$_EXPORTS */
        #  define $PREFIX$_LOCAL $PREFIX$_API_LOCAL
        #else
        #  define $PREFIX$_API
        #  define $PREFIX$_LOCAL
        #endif  /* $PREFIX$_DLL */

        $end$

        #undef $PREFIX$_API_IMPORT
        #undef $PREFIX$_API_EXPORT
        #undef $PREFIX$_API_LOCAL
        #undef $PREFIX$_API
        #undef $PREFIX$_LOCAL]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Include guard</Title>
      <Shortcut>includeguard</Shortcut>
      <Description>Write include guard</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>NAME</ID>
          <ToolTip>Prefix of include guard macro</ToolTip>
          <Default></Default>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[#ifndef $NAME$_H
        #define $NAME$_H

        $end$

        #endif  // $NAME$_H]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Extern C</Title>
      <Shortcut>externc</Shortcut>
      <Description>extern "C" { ... }</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[#ifdef __cplusplus
        extern "C" {
        #endif  /* __cplusplus */

        $end$

        #ifdef __cplusplus
        }
        #endif  /* __cplusplus */
        ]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>std::cout and std::endl</Title>
      <Shortcut>cout</Shortcut>
      <Description>Insert std::cout &lt;&lt; ... &lt;&lt; std::endl</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[std::cout << $end$ << std::endl;]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>std::cout with new line character</Title>
      <Shortcut>cout2</Shortcut>
      <Description>Insert std::cout &lt;&lt; ... &lt;&lt; '\n'</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[std::cout << $end$ << '\n';]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Output all elements in container</Title>
      <Shortcut>coutall</Shortcut>
      <Description>Output all elements in container to std::cout</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>container</ID>
          <ToolTip>Container</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::copy(std::cbegin($container$), std::cend($container$), std::ostream_iterator<const decltype($container$)::value_type&>(std::cout));$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Put one charcter</Title>
      <Shortcut>put</Shortcut>
      <Description>Put one charcter to std::cout</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[std::cout.put($end$);]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>std::cerr and std::endl</Title>
      <Shortcut>cerr</Shortcut>
      <Description>Insert std::cerr &lt;&lt; ... &lt;&lt; std::endl</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[std::cerr << $end$ << std::endl;]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>std::clog and std::endl</Title>
      <Shortcut>clog</Shortcut>
      <Description>Insert std::clog &lt;&lt; ... &lt;&lt; std::endl</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[std::clog << $end$ << std::endl;]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Read stdin from std::cin</Title>
      <Shortcut>cin</Shortcut>
      <Description>std::cin &gt;&gt;</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[std::cin >> $end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Read one character from std::cin</Title>
      <Shortcut>get</Shortcut>
      <Description>std::cin.get()</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Code Language="cpp">
        <![CDATA[std::cin.get();$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>std::setprecision</Title>
      <Shortcut>setprecision</Shortcut>
      <Description>Specify float/double number of digits after the decimal point</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>nDigits</ID>
          <ToolTip>Number of digits after the decimal point</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::fixed << std::setprecision($nDigits$) << $end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>std::setfill</Title>
      <Shortcut>setfill</Shortcut>
      <Description>Specify least width and a character to fill</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>width</ID>
          <ToolTip>output width</ToolTip>
        </Literal>
        <Literal>
          <ID>fillCharacter</ID>
          <ToolTip>Character to fill</ToolTip>
          <Default>0</Default>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::setw($width$) << std::setfill('$fillCharacter$') << $end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>File open with std::fstream</Title>
      <Shortcut>fstream</Shortcut>
      <Description>File open with std::fstream and check an open error</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>streamType</ID>
          <ToolTip>Stream type (fstream, ifstream or ofstream)</ToolTip>
          <Default>fstream</Default>
        </Literal>
        <Literal>
          <ID>name</ID>
          <ToolTip>Variable name</ToolTip>
          <Default>fs</Default>
        </Literal>
        <Literal>
          <ID>filename</ID>
          <ToolTip>File name</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::$streamType$ $fs$($filename$);
        if (!$fs$.is_open()) {
          std::cerr << "Failed to open: " << $filename$ << std::endl;
        }
        $end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Read all from stream</Title>
      <Shortcut>readall</Shortcut>
      <Description>Read all characters from stream</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Variable name</ToolTip>
        </Literal>
        <Literal>
          <ID>stream</ID>
          <ToolTip>Stream variable</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::string $name$((std::istreambuf_iterator<char>($stream$)), std::istreambuf_iterator<char>());$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Sleep with std::this_thread::sleep_for()</Title>
      <Shortcut>sleep</Shortcut>
      <Description>Sleep with std::this_thread::sleep_for()</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>timeUnit</ID>
          <ToolTip>Unit of time</ToolTip>
          <Default>milliseconds</Default>
        </Literal>
        <Literal>
          <ID>sleepTime</ID>
          <ToolTip>Sleep time</ToolTip>
          <Default>1000</Default>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::this_thread::sleep_for(std::chrono::$timeUnit$($sleepTime$));$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Range based for</Title>
      <Shortcut>rbf</Shortcut>
      <Description>A code snippet for Range Based For</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>element</ID>
          <ToolTip>Element</ToolTip>
          <Default>e</Default>
        </Literal>
        <Literal>
          <ID>container</ID>
          <ToolTip>Container</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[for (auto&& $element$ : $container$) {
          $end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Range based for (const)</Title>
      <Shortcut>rbfc</Shortcut>
      <Description>A code snippet for Range Based For (each element is const)</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>element</ID>
          <ToolTip>Element</ToolTip>
          <Default>e</Default>
        </Literal>
        <Literal>
          <ID>container</ID>
          <ToolTip>Container</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[for (const auto& $element$ : $container$) {
          $end$
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>static_cast&lt;&gt;()</Title>
      <Shortcut>staticcast</Shortcut>
      <Description>static_cast&lt;...&gt;(...)</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Destination type</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[static_cast<$type$>($end$)]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>reinterpret_cast&lt;&gt;()</Title>
      <Shortcut>reinterpretcast</Shortcut>
      <Description>reinterpret_cast&lt;...&gt;(...)</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Destination type</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[reinterpret_cast<$type$>($end$)]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>const_cast&lt;&gt;()</Title>
      <Shortcut>constcast</Shortcut>
      <Description>const_cast&lt;...&gt;(...)</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Destination type</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[const_cast<$type$>($end$)]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>dynamic_cast&lt;&gt;()</Title>
      <Shortcut>dynamiccast</Shortcut>
      <Description>dynamic_cast&lt;...&gt;(...)</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Destination type</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[dynamic_cast<$type$>($end$)]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>std::chrono::duration_cast&lt;&gt;()</Title>
      <Shortcut>durationcast</Shortcut>
      <Description>std::chrono::duration_cast&lt;...&gt;(...)</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>type</ID>
          <ToolTip>Destination type</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::chrono::duration_cast<$type$>($end$)]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Split std::string</Title>
      <Shortcut>split</Shortcut>
      <Description>Split std::string by std::string</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>tokens</ID>
          <ToolTip>Token vector</ToolTip>
          <Default>tokens</Default>
        </Literal>
        <Literal>
          <ID>spos</ID>
          <ToolTip>Start index</ToolTip>
          <Default>spos</Default>
        </Literal>
        <Literal>
          <ID>epos</ID>
          <ToolTip>End index</ToolTip>
          <Default>epos</Default>
        </Literal>
        <Literal>
          <ID>delimiterLength</ID>
          <ToolTip>Delimiter length</ToolTip>
          <Default>delimlen</Default>
        </Literal>
        <Literal>
          <ID>delimiter</ID>
          <ToolTip>Delimiter string</ToolTip>
          <Default>","</Default>
        </Literal>
        <Literal>
          <ID>srcString</ID>
          <ToolTip>Source string</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::vector<std::string> $tokens$;
        std::string::size_type $spos$ = 0, $epos$, $delimiterLength$ = sizeof($delimiter$) - 1;
        while (($epos$ = $srcString$.find_first_of($delimiter$, $spos$)) != std::string::npos) {
          $tokens$.emplace_back($srcString$.substr($spos$, $epos$ - $spos$));
          $spos$ = $epos$ + $delimiterLength$;
        }
        $tokens$.emplace_back($srcString$.substr($spos$));
        $end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Join std::string</Title>
      <Shortcut>join</Shortcut>
      <Description>join std::string by std::string</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>ostringstream</ID>
          <ToolTip>std::ostringstream to join elements</ToolTip>
          <Default>oss</Default>
        </Literal>
        <Literal>
          <ID>elements</ID>
          <ToolTip>Elements to join</ToolTip>
        </Literal>
        <Literal>
          <ID>delimiter</ID>
          <ToolTip>Delimiter string</ToolTip>
          <Default>","</Default>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::ostringstream $ostringstream$;
        if (!$elements$.empty()) {
          std::copy(std::cbegin($elements$), std::prev(std::cend($elements$)), std::ostream_iterator<const decltype($elements$)::value_type&>($ostringstream$, $delimiter$));
          $ostringstream$ << *std::crbegin($elements$);
        }
        $end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Join std::string by one character</Title>
      <Shortcut>jointostring</Shortcut>
      <Description>join std::string by one character</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>elements</ID>
          <ToolTip>Elements to join</ToolTip>
        </Literal>
        <Literal>
          <ID>acc</ID>
          <ToolTip>Accumulator variable</ToolTip>
          <Default>acc</Default>
        </Literal>
        <Literal>
          <ID>element</ID>
          <ToolTip>One element variable</ToolTip>
          <Default>e</Default>
        </Literal>
        <Literal>
          <ID>delimiter</ID>
          <ToolTip>Delimiter string</ToolTip>
          <Default>","</Default>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[$elements$.empty() ? "" : std::accumulate(
        std::next(std::cbegin($elements$)),
        std::cend($elements$),
        std::to_string($elements$[0]),
        [](const std::string& $acc$, const decltype($elements$)::value_type& $element$) {
          return $acc$ + $delimiter$ + std::to_string($element$);
        })$end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>Split std::string by one charcter</Title>
      <Shortcut>splitchar</Shortcut>
      <Description>Split std::string by one charcter</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>tokens</ID>
          <ToolTip>Token vector</ToolTip>
          <Default>tokens</Default>
        </Literal>
        <Literal>
          <ID>istringstream</ID>
          <ToolTip>Input string stream to split std::string</ToolTip>
          <Default>iss</Default>
        </Literal>
        <Literal>
          <ID>srcString</ID>
          <ToolTip>Source string</ToolTip>
        </Literal>
        <Literal>
          <ID>token</ID>
          <ToolTip>One token</ToolTip>
          <Default>token</Default>
        </Literal>
        <Literal>
          <ID>delimiter</ID>
          <ToolTip>Delimiter character</ToolTip>
          <Default>','</Default>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::vector<std::string> $tokens$;
        std::istringstream $istringstream$($srcString$);
        for (std::string $token$; std::getline($istringstream$, $token$, $delimiter$);) {
          $tokens$.push_back($token$);
        }
        $end$]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>std::regex</Title>
      <Shortcut>regex</Shortcut>
      <Description>std::regex ...("...")</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>name</ID>
          <ToolTip>Name of variable</ToolTip>
          <Default>re</Default>
        </Literal>
        <Literal>
          <ID>pattern</ID>
          <ToolTip>Regex pattern string</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[std::regex $name$("$pattern$");]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>std::regex match loop</Title>
      <Shortcut>regexmatchloop</Shortcut>
      <Description>Expand regex match loop</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>iterator</ID>
          <ToolTip>Regex iterator</ToolTip>
          <Default>itr</Default>
        </Literal>
        <Literal>
          <ID>text</ID>
          <ToolTip>Target string</ToolTip>
        </Literal>
        <Literal>
          <ID>regex</ID>
          <ToolTip>std::regex object (not temporary object)</ToolTip>
        </Literal>
        <Literal>
          <ID>end</ID>
          <ToolTip>End of iterator</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[for (std::sregex_iterator $iterator$ = std::sregex_iterator(std::cbegin($text$), std::cend($text$), $regex$), $end$; $iterator$ != $end$; ++$iterator$) {
          ${0:TARGET}
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>std::regex split loop</Title>
      <Shortcut>regexsplitloop</Shortcut>
      <Description>Expand regex split loop</Description>
      <Author>koturn</Author>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
        <SnippetType>SurroundsWith</SnippetType>
      </SnippetTypes>
    </Header>
    <Snippet>
      <Declarations>
        <Literal>
          <ID>iterator</ID>
          <ToolTip>Regex iterator</ToolTip>
          <Default>itr</Default>
        </Literal>
        <Literal>
          <ID>text</ID>
          <ToolTip>Target string</ToolTip>
        </Literal>
        <Literal>
          <ID>regex</ID>
          <ToolTip>std::regex object (not temporary object)</ToolTip>
        </Literal>
        <Literal>
          <ID>end</ID>
          <ToolTip>End of iterator</ToolTip>
        </Literal>
      </Declarations>
      <Code Language="cpp">
        <![CDATA[for (std::sregex_iterator $iterator$ = std::sregex_iterator(std::cbegin($text$), std::cend($text$), $regex$, -1), $end$; $iterator$ != $end$; ++$iterator$) {
          ${0:TARGET}
        }]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
